/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Backend.Games;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author megan
 */
public class TicTacToeScreen extends javax.swing.JFrame
{
    Games game = new Games();
    /**
     * Creates new form TicTacToeScreen
     */
    public TicTacToeScreen()
    {
        initComponents();
        //setting full screen
        this.setExtendedState(this.MAXIMIZED_BOTH);
        
        //instantiating the openspaces arraylist
        game.instantiateOpenSpaces();
        game.instantiateLayout();
        
        //getting the results from all the matches
        statsTextArea.setText(game.ticTacToeToString());
        //resetButtonValues();
    }
    
    
    //sets all the buttons to their default values
    public void resetButtonValues()
    {
        button1.setText(" ");
        button2.setText(" ");
        button3.setText(" ");
        button4.setText(" ");
        button5.setText(" ");
        button6.setText(" ");
        button7.setText(" ");
        button8.setText(" ");
        button9.setText(" ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        statsTextArea = new javax.swing.JTextArea();
        backButton = new javax.swing.JButton();
        diaryButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        statsTextArea.setEditable(false);
        statsTextArea.setBackground(new java.awt.Color(15, 28, 33));
        statsTextArea.setColumns(20);
        statsTextArea.setFont(new java.awt.Font("Perpetua Titling MT", 0, 18)); // NOI18N
        statsTextArea.setForeground(new java.awt.Color(139, 118, 82));
        statsTextArea.setLineWrap(true);
        statsTextArea.setRows(5);
        statsTextArea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        jScrollPane1.setViewportView(statsTextArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 210, 430));

        backButton.setBackground(new java.awt.Color(15, 28, 33));
        backButton.setFont(new java.awt.Font("High Tower Text", 1, 24)); // NOI18N
        backButton.setForeground(new java.awt.Color(139, 118, 82));
        backButton.setText("<<");
        backButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 80, 50));

        diaryButton.setBackground(new java.awt.Color(15, 28, 33));
        diaryButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        diaryButton.setForeground(new java.awt.Color(139, 118, 82));
        diaryButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\diaryIcon.jpg")); // NOI18N
        diaryButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        diaryButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                diaryButtonActionPerformed(evt);
            }
        });
        getContentPane().add(diaryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 30, -1, 70));

        homeButton.setBackground(new java.awt.Color(15, 28, 33));
        homeButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        homeButton.setForeground(new java.awt.Color(139, 118, 82));
        homeButton.setText("HOME");
        homeButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        homeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                homeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 30, 90, 70));

        infoButton.setBackground(new java.awt.Color(15, 28, 33));
        infoButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        infoButton.setForeground(new java.awt.Color(139, 118, 82));
        infoButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\infoIcon.png")); // NOI18N
        infoButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        infoButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                infoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(infoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 110, -1, 60));

        button1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button1.setText(" ");
        button1.setBorder(null);
        button1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button1ActionPerformed(evt);
            }
        });
        getContentPane().add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 120, 120));

        button2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button2.setText(" ");
        button2.setBorder(null);
        button2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button2ActionPerformed(evt);
            }
        });
        getContentPane().add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 120, 120));

        button3.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button3.setText(" ");
        button3.setBorder(null);
        button3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button3ActionPerformed(evt);
            }
        });
        getContentPane().add(button3, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 180, 120, 120));

        button4.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button4.setText(" ");
        button4.setBorder(null);
        button4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button4ActionPerformed(evt);
            }
        });
        getContentPane().add(button4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 320, 120, 120));

        button5.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button5.setText(" ");
        button5.setBorder(null);
        button5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button5ActionPerformed(evt);
            }
        });
        getContentPane().add(button5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 320, 120, 120));

        button6.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button6.setText(" ");
        button6.setBorder(null);
        button6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button6ActionPerformed(evt);
            }
        });
        getContentPane().add(button6, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 320, 120, 120));

        button7.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button7.setText(" ");
        button7.setBorder(null);
        button7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button7ActionPerformed(evt);
            }
        });
        getContentPane().add(button7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 460, 120, 120));

        button8.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button8.setText(" ");
        button8.setBorder(null);
        button8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button8ActionPerformed(evt);
            }
        });
        getContentPane().add(button8, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 460, 120, 120));

        button9.setFont(new java.awt.Font("Perpetua Titling MT", 1, 36)); // NOI18N
        button9.setText(" ");
        button9.setBorder(null);
        button9.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button9ActionPerformed(evt);
            }
        });
        getContentPane().add(button9, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 460, 120, 120));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\ticTacToeGrid.jpg")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, 430, 430));

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(139, 118, 82));
        jLabel2.setText("STATISTICS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        background.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\redBackground.png")); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -330, 1400, 1200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
    {//GEN-HEADEREND:event_backButtonActionPerformed
        this.dispose();
        new DiningRoom().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void diaryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_diaryButtonActionPerformed
    {//GEN-HEADEREND:event_diaryButtonActionPerformed
        try
        {
            new DiaryScreen().setVisible(true);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_diaryButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_homeButtonActionPerformed
    {//GEN-HEADEREND:event_homeButtonActionPerformed
        this.dispose();
        new UserScreen().setVisible(true);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_infoButtonActionPerformed
    {//GEN-HEADEREND:event_infoButtonActionPerformed
        try
        {
            new ObjectiveScreen().setVisible(true);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_infoButtonActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button1ActionPerformed
    {//GEN-HEADEREND:event_button1ActionPerformed
        game.addSymbol(button1, 1, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button2ActionPerformed
    {//GEN-HEADEREND:event_button2ActionPerformed
        game.addSymbol(button2, 2, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button2, 1, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button3ActionPerformed
    {//GEN-HEADEREND:event_button3ActionPerformed
        game.addSymbol(button3, 3, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button4ActionPerformed
    {//GEN-HEADEREND:event_button4ActionPerformed
        game.addSymbol(button4, 4, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button5ActionPerformed
    {//GEN-HEADEREND:event_button5ActionPerformed
        game.addSymbol(button5, 5, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button5ActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button6ActionPerformed
    {//GEN-HEADEREND:event_button6ActionPerformed
        game.addSymbol(button6, 6, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button6ActionPerformed

    private void button7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button7ActionPerformed
    {//GEN-HEADEREND:event_button7ActionPerformed
        game.addSymbol(button7, 7, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button8"))
        {
            game.addSymbol(button8, 8, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button7ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button8ActionPerformed
    {//GEN-HEADEREND:event_button8ActionPerformed
        game.addSymbol(button8, 8, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else
        {
            game.addSymbol(button9, 9, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button8ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button9ActionPerformed
    {//GEN-HEADEREND:event_button9ActionPerformed
        game.addSymbol(button9, 9, "X");
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //AI's turn
        String computerMove = game.computerMove();
        if(computerMove.equals("button1"))
        {
            game.addSymbol(button1, 1, "O");
        }
        else if(computerMove.equals("button2"))
        {
            game.addSymbol(button2, 2, "O");
        }
        else if(computerMove.equals("button3"))
        {
            game.addSymbol(button3, 3, "O");
        }
        else if(computerMove.equals("button4"))
        {
            game.addSymbol(button4, 4, "O");
        }
        else if(computerMove.equals("button5"))
        {
            game.addSymbol(button5, 5, "O");
        }
        else if(computerMove.equals("button6"))
        {
            game.addSymbol(button6, 6, "O");
        }
        else if(computerMove.equals("button7"))
        {
            game.addSymbol(button7, 7, "O");
        }
        else
        {
            game.addSymbol(button8, 8, "O");
        }
        
        try
        {
            if(game.isTicTacToeRoundComplete())
            {
                //reseting the statistics in case of a win or draw
                statsTextArea.setText(game.ticTacToeToString());
                
                //resetting the display
                resetButtonValues();
            }
        } catch (IOException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex)
        {
            Logger.getLogger(TicTacToeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button9ActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton diaryButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton infoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statsTextArea;
    // End of variables declaration//GEN-END:variables
}
