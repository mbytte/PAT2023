/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Backend.Games;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author megan
 */
public class SlidingPuzzleScreen extends javax.swing.JFrame
{
    Games puzzle = new Games();
    /**
     * Creates new form PuzzleScreen
     */
    public SlidingPuzzleScreen() throws IOException
    {
        initComponents();
        //setting full screen
        this.setExtendedState(this.MAXIMIZED_BOTH);
        
        //creating the picture set up and applying it
        puzzle.createPicSetup();
        String[] picSetup = puzzle.getCurrentPicOrder();
        
        //showing the picture set up
        for(int i = 0; i < 6; i++)
        {
            System.out.println(picSetup[i]);
        }
        
        BufferedImage img;
        img = ImageIO.read(new File(picSetup[0]));        
        button0.setIcon(new ImageIcon(img));
        
        img = ImageIO.read(new File(picSetup[1]));        
        button1.setIcon(new ImageIcon(img));
        
        img = ImageIO.read(new File(picSetup[2]));        
        button2.setIcon(new ImageIcon(img));
        
        img = ImageIO.read(new File(picSetup[3]));        
        button3.setIcon(new ImageIcon(img));
        
        img = ImageIO.read(new File(picSetup[4]));        
        button4.setIcon(new ImageIcon(img));
        
        img = ImageIO.read(new File(picSetup[5]));        
        button5.setIcon(new ImageIcon(img));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        backButton = new javax.swing.JButton();
        diaryButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        infoButton = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backButton.setBackground(new java.awt.Color(15, 28, 33));
        backButton.setFont(new java.awt.Font("High Tower Text", 1, 24)); // NOI18N
        backButton.setForeground(new java.awt.Color(139, 118, 82));
        backButton.setText("<<");
        backButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 80, 50));

        diaryButton.setBackground(new java.awt.Color(15, 28, 33));
        diaryButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        diaryButton.setForeground(new java.awt.Color(139, 118, 82));
        diaryButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\diaryIcon.jpg")); // NOI18N
        diaryButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        diaryButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                diaryButtonActionPerformed(evt);
            }
        });
        getContentPane().add(diaryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 30, -1, 70));

        homeButton.setBackground(new java.awt.Color(15, 28, 33));
        homeButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        homeButton.setForeground(new java.awt.Color(139, 118, 82));
        homeButton.setText("HOME");
        homeButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        homeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                homeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 30, 90, 70));

        infoButton.setBackground(new java.awt.Color(15, 28, 33));
        infoButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        infoButton.setForeground(new java.awt.Color(139, 118, 82));
        infoButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\infoIcon.png")); // NOI18N
        infoButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(139, 118, 82), 5, true));
        infoButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                infoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(infoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 110, -1, 60));

        button0.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button0ActionPerformed(evt);
            }
        });
        getContentPane().add(button0, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 270, 316));

        button1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button1ActionPerformed(evt);
            }
        });
        getContentPane().add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, 270, 316));

        button2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button2ActionPerformed(evt);
            }
        });
        getContentPane().add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 30, 270, 316));

        button3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button3ActionPerformed(evt);
            }
        });
        getContentPane().add(button3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 350, 270, 316));

        button4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button4ActionPerformed(evt);
            }
        });
        getContentPane().add(button4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 350, 270, 316));

        button5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button5ActionPerformed(evt);
            }
        });
        getContentPane().add(button5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 350, 270, 316));

        background.setIcon(new javax.swing.ImageIcon("C:\\Users\\megan\\OneDrive\\Documents\\NetBeansProjects\\PAT2023\\resources\\redBackground.png")); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -320, 1400, 1200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
    {//GEN-HEADEREND:event_backButtonActionPerformed
        this.dispose();
        new DiningRoom().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void diaryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_diaryButtonActionPerformed
    {//GEN-HEADEREND:event_diaryButtonActionPerformed
        try
        {
            this.dispose();
            new DiaryScreen().setVisible(true);
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_diaryButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_homeButtonActionPerformed
    {//GEN-HEADEREND:event_homeButtonActionPerformed
        this.dispose();
        new UserScreen().setVisible(true);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_infoButtonActionPerformed
    {//GEN-HEADEREND:event_infoButtonActionPerformed
        try
        {
            new ObjectiveScreen().setVisible(true);
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_infoButtonActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button3ActionPerformed
    {//GEN-HEADEREND:event_button3ActionPerformed
        //getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        System.out.println(blankPicFrame + "\n\n");
        
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(3, blankPicFrame, button0, button1, button2, button3, button4, button5);
            System.out.println(blankPicFrame + "\n\n");
             String[] picSetup = puzzle.getCurrentPicOrder();
             //showing the picture set up
        for(int i = 0; i < 6; i++)
        {
            System.out.println(picSetup[i]);
        }
            
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button3ActionPerformed

    private void button0ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button0ActionPerformed
    {//GEN-HEADEREND:event_button0ActionPerformed
        System.out.println("Button is run");
        
        //getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        System.out.println(blankPicFrame);
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(0, blankPicFrame, button0, button1, button2, button3, button4, button5);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button0ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button1ActionPerformed
    {//GEN-HEADEREND:event_button1ActionPerformed
        //getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(1, blankPicFrame, button0, button1, button2, button3, button4, button5);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button2ActionPerformed
    {//GEN-HEADEREND:event_button2ActionPerformed
        //getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(2, blankPicFrame, button0, button1, button2, button3, button4, button5);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button2ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button4ActionPerformed
    {//GEN-HEADEREND:event_button4ActionPerformed
        ///getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(4, blankPicFrame, button0, button1, button2, button3, button4, button5);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button5ActionPerformed
    {//GEN-HEADEREND:event_button5ActionPerformed
        //getting the current location of the blank picture
        int blankPicFrame = puzzle.getCirclePicPos();
        try
        {        
            //swapping selected picture with the blank pic
            puzzle.buttonPicSwap(5, blankPicFrame, button0, button1, button2, button3, button4, button5);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            //checking if the picture is correctly sorted out
            puzzle.puzzleWin();
        } catch (SQLException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(SlidingPuzzleScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        //closing the screen if game has been won(can't dispose a screen in a method so it has to be done here)
        if(puzzle.isPuzzleWin())
        {
            this.dispose();
        }
    }//GEN-LAST:event_button5ActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton diaryButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton infoButton;
    // End of variables declaration//GEN-END:variables
}
